// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Open Xsd2Code - Mod by ValenciaportPCS Team. Version 3.4.0.21243 MIT License (MIT) 
//    <NameSpace>Infoport.GesportPCS.Api</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><SaveToProjectFolder>False</SaveToProjectFolder><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><AddEmptyNamespace>False</AddEmptyNamespace><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Infoport.GesportPCS.Api
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class IfcsumDataset
    {

        private List<object> itemsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public IfcsumDataset()
        {
            this.itemsField = new List<object>();
        }

        [System.Xml.Serialization.XmlElementAttribute("CaptureBL", typeof(IfcsumDatasetCaptureBL), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("Declarations", typeof(IfcsumDatasetDeclarations), Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<object> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDataset));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDataset object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDataset object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDataset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDataset obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDataset);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDataset obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDataset Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDataset)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDataset object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDataset object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDataset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDataset obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDataset);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDataset obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDataset LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetCaptureBL
    {

        private int regIdField;

        private string bLNumberField;

        private string capturedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BLNumber
        {
            get
            {
                return this.bLNumberField;
            }
            set
            {
                this.bLNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Captured
        {
            get
            {
                return this.capturedField;
            }
            set
            {
                this.capturedField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetCaptureBL));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetCaptureBL object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetCaptureBL object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetCaptureBL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetCaptureBL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetCaptureBL);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetCaptureBL obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetCaptureBL Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetCaptureBL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetCaptureBL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetCaptureBL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetCaptureBL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetCaptureBL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetCaptureBL);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetCaptureBL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetCaptureBL LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarations
    {

        private int regIdField;

        private string messageSenderField;

        private string messageRecipientField;

        private string messageNumberField;

        private string summaryDeclarationField;

        private string summaryTypeField;

        private string documentOwnerField;

        private string diffTypeField;

        private string portCallReferenceField;

        private string declaringAgentField;

        private string serviceCodeField;

        private string simplifiedRegimeField;

        private string transportMovementField;

        private string regularServiceField;

        private string transitProcedureField;

        private string vesselAgentField;

        private string messageFunctionField;

        private string customsLocationField;

        private string terminalOperatorField;

        private string serverStatusField;

        private string serverUserField;

        private string serverMessageOwnerField;

        private string serverReferenceField;

        private int serverMessageIDField;

        private bool serverMessageIDFieldSpecified;

        private System.DateTime serverDocumentCreationDateField;

        private bool serverDocumentCreationDateFieldSpecified;

        private string serverAssignedCodeField;

        private System.DateTime serverLastDocumentModificationDateField;

        private bool serverLastDocumentModificationDateFieldSpecified;

        private List<IfcsumDatasetDeclarationsConsignments> consignmentsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public IfcsumDatasetDeclarations()
        {
            this.consignmentsField = new List<IfcsumDatasetDeclarationsConsignments>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MessageSender
        {
            get
            {
                return this.messageSenderField;
            }
            set
            {
                this.messageSenderField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MessageRecipient
        {
            get
            {
                return this.messageRecipientField;
            }
            set
            {
                this.messageRecipientField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MessageNumber
        {
            get
            {
                return this.messageNumberField;
            }
            set
            {
                this.messageNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SummaryDeclaration
        {
            get
            {
                return this.summaryDeclarationField;
            }
            set
            {
                this.summaryDeclarationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SummaryType
        {
            get
            {
                return this.summaryTypeField;
            }
            set
            {
                this.summaryTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DocumentOwner
        {
            get
            {
                return this.documentOwnerField;
            }
            set
            {
                this.documentOwnerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DiffType
        {
            get
            {
                return this.diffTypeField;
            }
            set
            {
                this.diffTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PortCallReference
        {
            get
            {
                return this.portCallReferenceField;
            }
            set
            {
                this.portCallReferenceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DeclaringAgent
        {
            get
            {
                return this.declaringAgentField;
            }
            set
            {
                this.declaringAgentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServiceCode
        {
            get
            {
                return this.serviceCodeField;
            }
            set
            {
                this.serviceCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SimplifiedRegime
        {
            get
            {
                return this.simplifiedRegimeField;
            }
            set
            {
                this.simplifiedRegimeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TransportMovement
        {
            get
            {
                return this.transportMovementField;
            }
            set
            {
                this.transportMovementField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RegularService
        {
            get
            {
                return this.regularServiceField;
            }
            set
            {
                this.regularServiceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TransitProcedure
        {
            get
            {
                return this.transitProcedureField;
            }
            set
            {
                this.transitProcedureField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VesselAgent
        {
            get
            {
                return this.vesselAgentField;
            }
            set
            {
                this.vesselAgentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MessageFunction
        {
            get
            {
                return this.messageFunctionField;
            }
            set
            {
                this.messageFunctionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomsLocation
        {
            get
            {
                return this.customsLocationField;
            }
            set
            {
                this.customsLocationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TerminalOperator
        {
            get
            {
                return this.terminalOperatorField;
            }
            set
            {
                this.terminalOperatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerStatus
        {
            get
            {
                return this.serverStatusField;
            }
            set
            {
                this.serverStatusField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerUser
        {
            get
            {
                return this.serverUserField;
            }
            set
            {
                this.serverUserField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerMessageOwner
        {
            get
            {
                return this.serverMessageOwnerField;
            }
            set
            {
                this.serverMessageOwnerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerReference
        {
            get
            {
                return this.serverReferenceField;
            }
            set
            {
                this.serverReferenceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ServerMessageID
        {
            get
            {
                return this.serverMessageIDField;
            }
            set
            {
                this.serverMessageIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServerMessageIDSpecified
        {
            get
            {
                return this.serverMessageIDFieldSpecified;
            }
            set
            {
                this.serverMessageIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ServerDocumentCreationDate
        {
            get
            {
                return this.serverDocumentCreationDateField;
            }
            set
            {
                this.serverDocumentCreationDateField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServerDocumentCreationDateSpecified
        {
            get
            {
                return this.serverDocumentCreationDateFieldSpecified;
            }
            set
            {
                this.serverDocumentCreationDateFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerAssignedCode
        {
            get
            {
                return this.serverAssignedCodeField;
            }
            set
            {
                this.serverAssignedCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ServerLastDocumentModificationDate
        {
            get
            {
                return this.serverLastDocumentModificationDateField;
            }
            set
            {
                this.serverLastDocumentModificationDateField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServerLastDocumentModificationDateSpecified
        {
            get
            {
                return this.serverLastDocumentModificationDateFieldSpecified;
            }
            set
            {
                this.serverLastDocumentModificationDateFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Consignments", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignments> Consignments
        {
            get
            {
                return this.consignmentsField;
            }
            set
            {
                this.consignmentsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarations));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarations object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarations object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarations obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarations);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarations obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarations Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarations)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarations object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarations object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarations obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarations);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarations obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarations LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignments
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string consignmentNumberField;

        private string bLTypeField;

        private string bLNumberField;

        private string placeOfOriginField;

        private string portOfLoadingField;

        private string portOfDischargeField;

        private string placeOfDestinationField;

        private string portOfTranshipmentField;

        private string secondaryTransportTypeField;

        private string secondaryTransportModeField;

        private string subsequentVesselIdField;

        private string customsLocationField;

        private string terminalOperatorField;

        private string serverStatusField;

        private string serverPrecapturedField;

        private List<IfcsumDatasetDeclarationsConsignmentsGoodsItems> goodsItemsField;

        private List<IfcsumDatasetDeclarationsConsignmentsEquipments> equipmentsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public IfcsumDatasetDeclarationsConsignments()
        {
            this.equipmentsField = new List<IfcsumDatasetDeclarationsConsignmentsEquipments>();
            this.goodsItemsField = new List<IfcsumDatasetDeclarationsConsignmentsGoodsItems>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ConsignmentNumber
        {
            get
            {
                return this.consignmentNumberField;
            }
            set
            {
                this.consignmentNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BLType
        {
            get
            {
                return this.bLTypeField;
            }
            set
            {
                this.bLTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BLNumber
        {
            get
            {
                return this.bLNumberField;
            }
            set
            {
                this.bLNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PlaceOfOrigin
        {
            get
            {
                return this.placeOfOriginField;
            }
            set
            {
                this.placeOfOriginField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PortOfLoading
        {
            get
            {
                return this.portOfLoadingField;
            }
            set
            {
                this.portOfLoadingField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PortOfDischarge
        {
            get
            {
                return this.portOfDischargeField;
            }
            set
            {
                this.portOfDischargeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PlaceOfDestination
        {
            get
            {
                return this.placeOfDestinationField;
            }
            set
            {
                this.placeOfDestinationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PortOfTranshipment
        {
            get
            {
                return this.portOfTranshipmentField;
            }
            set
            {
                this.portOfTranshipmentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SecondaryTransportType
        {
            get
            {
                return this.secondaryTransportTypeField;
            }
            set
            {
                this.secondaryTransportTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SecondaryTransportMode
        {
            get
            {
                return this.secondaryTransportModeField;
            }
            set
            {
                this.secondaryTransportModeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SubsequentVesselId
        {
            get
            {
                return this.subsequentVesselIdField;
            }
            set
            {
                this.subsequentVesselIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomsLocation
        {
            get
            {
                return this.customsLocationField;
            }
            set
            {
                this.customsLocationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TerminalOperator
        {
            get
            {
                return this.terminalOperatorField;
            }
            set
            {
                this.terminalOperatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerStatus
        {
            get
            {
                return this.serverStatusField;
            }
            set
            {
                this.serverStatusField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerPrecaptured
        {
            get
            {
                return this.serverPrecapturedField;
            }
            set
            {
                this.serverPrecapturedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("GoodsItems", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignmentsGoodsItems> GoodsItems
        {
            get
            {
                return this.goodsItemsField;
            }
            set
            {
                this.goodsItemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Equipments", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignmentsEquipments> Equipments
        {
            get
            {
                return this.equipmentsField;
            }
            set
            {
                this.equipmentsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignments));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignments object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignments object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignments);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignments obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignments Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignments)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignments object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignments object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignments);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignments obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignments LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignmentsGoodsItems
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string goodsItemNumberField;

        private string relatedSummaryDeclarationField;

        private int relatedConsignmentNumberField;

        private bool relatedConsignmentNumberFieldSpecified;

        private int relatedGoodsItemNumberField;

        private bool relatedGoodsItemNumberFieldSpecified;

        private long packageNumberField;

        private bool packageNumberFieldSpecified;

        private string packageTypeField;

        private decimal grossWeightField;

        private bool grossWeightFieldSpecified;

        private decimal volumeField;

        private bool volumeFieldSpecified;

        private string taricCodeField;

        private string customsLocationField;

        private string terminalOperatorField;

        private string iMDGClassField;

        private string uNDGNumberField;

        private string serverStatusField;

        private List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution> goodsDistributionField;

        private List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments> goodsDocumentsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public IfcsumDatasetDeclarationsConsignmentsGoodsItems()
        {
            this.goodsDocumentsField = new List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments>();
            this.goodsDistributionField = new List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GoodsItemNumber
        {
            get
            {
                return this.goodsItemNumberField;
            }
            set
            {
                this.goodsItemNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RelatedSummaryDeclaration
        {
            get
            {
                return this.relatedSummaryDeclarationField;
            }
            set
            {
                this.relatedSummaryDeclarationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RelatedConsignmentNumber
        {
            get
            {
                return this.relatedConsignmentNumberField;
            }
            set
            {
                this.relatedConsignmentNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelatedConsignmentNumberSpecified
        {
            get
            {
                return this.relatedConsignmentNumberFieldSpecified;
            }
            set
            {
                this.relatedConsignmentNumberFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RelatedGoodsItemNumber
        {
            get
            {
                return this.relatedGoodsItemNumberField;
            }
            set
            {
                this.relatedGoodsItemNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelatedGoodsItemNumberSpecified
        {
            get
            {
                return this.relatedGoodsItemNumberFieldSpecified;
            }
            set
            {
                this.relatedGoodsItemNumberFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PackageNumber
        {
            get
            {
                return this.packageNumberField;
            }
            set
            {
                this.packageNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PackageNumberSpecified
        {
            get
            {
                return this.packageNumberFieldSpecified;
            }
            set
            {
                this.packageNumberFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PackageType
        {
            get
            {
                return this.packageTypeField;
            }
            set
            {
                this.packageTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal GrossWeight
        {
            get
            {
                return this.grossWeightField;
            }
            set
            {
                this.grossWeightField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GrossWeightSpecified
        {
            get
            {
                return this.grossWeightFieldSpecified;
            }
            set
            {
                this.grossWeightFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Volume
        {
            get
            {
                return this.volumeField;
            }
            set
            {
                this.volumeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VolumeSpecified
        {
            get
            {
                return this.volumeFieldSpecified;
            }
            set
            {
                this.volumeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TaricCode
        {
            get
            {
                return this.taricCodeField;
            }
            set
            {
                this.taricCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomsLocation
        {
            get
            {
                return this.customsLocationField;
            }
            set
            {
                this.customsLocationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TerminalOperator
        {
            get
            {
                return this.terminalOperatorField;
            }
            set
            {
                this.terminalOperatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string IMDGClass
        {
            get
            {
                return this.iMDGClassField;
            }
            set
            {
                this.iMDGClassField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string UNDGNumber
        {
            get
            {
                return this.uNDGNumberField;
            }
            set
            {
                this.uNDGNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ServerStatus
        {
            get
            {
                return this.serverStatusField;
            }
            set
            {
                this.serverStatusField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("GoodsDistribution", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution> GoodsDistribution
        {
            get
            {
                return this.goodsDistributionField;
            }
            set
            {
                this.goodsDistributionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("GoodsDocuments", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments> GoodsDocuments
        {
            get
            {
                return this.goodsDocumentsField;
            }
            set
            {
                this.goodsDocumentsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignmentsGoodsItems));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItems object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignmentsGoodsItems object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItems object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItems obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItems);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItems obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItems Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignmentsGoodsItems)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItems object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignmentsGoodsItems object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItems object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItems obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItems);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItems obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItems LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string equipmentIdField;

        private long packageNumberField;

        private bool packageNumberFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EquipmentId
        {
            get
            {
                return this.equipmentIdField;
            }
            set
            {
                this.equipmentIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PackageNumber
        {
            get
            {
                return this.packageNumberField;
            }
            set
            {
                this.packageNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PackageNumberSpecified
        {
            get
            {
                return this.packageNumberFieldSpecified;
            }
            set
            {
                this.packageNumberFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDistribution LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string documentNumberField;

        private string documentStatusField;

        private System.DateTime documentDateField;

        private bool documentDateFieldSpecified;

        private string documentTypeField;

        private string customsMovementField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DocumentNumber
        {
            get
            {
                return this.documentNumberField;
            }
            set
            {
                this.documentNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DocumentStatus
        {
            get
            {
                return this.documentStatusField;
            }
            set
            {
                this.documentStatusField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime DocumentDate
        {
            get
            {
                return this.documentDateField;
            }
            set
            {
                this.documentDateField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DocumentDateSpecified
        {
            get
            {
                return this.documentDateFieldSpecified;
            }
            set
            {
                this.documentDateFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DocumentType
        {
            get
            {
                return this.documentTypeField;
            }
            set
            {
                this.documentTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomsMovement
        {
            get
            {
                return this.customsMovementField;
            }
            set
            {
                this.customsMovementField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsGoodsItemsGoodsDocuments LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignmentsEquipments
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string equipmentIdField;

        private string emptyEquipmentIdField;

        private string equipmentTypeField;

        private string containerTypeField;

        private long numberOfUnitsField;

        private bool numberOfUnitsFieldSpecified;

        private decimal tareWeightField;

        private bool tareWeightFieldSpecified;

        private string fullEmptyIndicatorField;

        private string customsLocationField;

        private string terminalOperatorField;

        private List<IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals> sealsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public IfcsumDatasetDeclarationsConsignmentsEquipments()
        {
            this.sealsField = new List<IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EquipmentId
        {
            get
            {
                return this.equipmentIdField;
            }
            set
            {
                this.equipmentIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EmptyEquipmentId
        {
            get
            {
                return this.emptyEquipmentIdField;
            }
            set
            {
                this.emptyEquipmentIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EquipmentType
        {
            get
            {
                return this.equipmentTypeField;
            }
            set
            {
                this.equipmentTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ContainerType
        {
            get
            {
                return this.containerTypeField;
            }
            set
            {
                this.containerTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long NumberOfUnits
        {
            get
            {
                return this.numberOfUnitsField;
            }
            set
            {
                this.numberOfUnitsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberOfUnitsSpecified
        {
            get
            {
                return this.numberOfUnitsFieldSpecified;
            }
            set
            {
                this.numberOfUnitsFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal TareWeight
        {
            get
            {
                return this.tareWeightField;
            }
            set
            {
                this.tareWeightField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TareWeightSpecified
        {
            get
            {
                return this.tareWeightFieldSpecified;
            }
            set
            {
                this.tareWeightFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FullEmptyIndicator
        {
            get
            {
                return this.fullEmptyIndicatorField;
            }
            set
            {
                this.fullEmptyIndicatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CustomsLocation
        {
            get
            {
                return this.customsLocationField;
            }
            set
            {
                this.customsLocationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TerminalOperator
        {
            get
            {
                return this.terminalOperatorField;
            }
            set
            {
                this.terminalOperatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Seals", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals> Seals
        {
            get
            {
                return this.sealsField;
            }
            set
            {
                this.sealsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignmentsEquipments));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsEquipments object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignmentsEquipments object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsEquipments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsEquipments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsEquipments);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsEquipments obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsEquipments Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignmentsEquipments)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsEquipments object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignmentsEquipments object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsEquipments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsEquipments obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsEquipments);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsEquipments obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsEquipments LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals
    {

        private int regIdField;

        private int parentIDField;

        private bool parentIDFieldSpecified;

        private string sealNumberField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RegId
        {
            get
            {
                return this.regIdField;
            }
            set
            {
                this.regIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentIDSpecified
        {
            get
            {
                return this.parentIDFieldSpecified;
            }
            set
            {
                this.parentIDFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SealNumber
        {
            get
            {
                return this.sealNumberField;
            }
            set
            {
                this.sealNumberField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IfcsumDatasetDeclarationsConsignmentsEquipmentsSeals LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
