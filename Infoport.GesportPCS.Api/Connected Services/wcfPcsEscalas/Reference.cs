//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wcfPcsEscalas
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="wcfPcsEscalas.PublicWebService")]
    public interface PublicWebService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:PublicWebService/GetVesselPortCallInfo", ReplyAction="urn:PublicWebService/GetVesselPortCallInfoResponse")]
        System.Threading.Tasks.Task<string> GetVesselPortCallInfoAsync(string portCallNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:PublicWebService/SearchVesselPortCalls", ReplyAction="urn:PublicWebService/SearchVesselPortCallsResponse")]
        System.Threading.Tasks.Task<string> SearchVesselPortCallsAsync(System.DateTime dateFrom, System.DateTime dateTo, string vesselName, bool portOfValencia, bool portOfGandia, bool portOfSagunto, bool statusPRV, bool statusOPE, bool statusAUT, bool statusFIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:PublicWebService/SearchHistoricalVesselPortCalls", ReplyAction="urn:PublicWebService/SearchHistoricalVesselPortCallsResponse")]
        System.Threading.Tasks.Task<string> SearchHistoricalVesselPortCallsAsync(int month, int year, string vesselName, bool portOfValencia, bool portOfGandia, bool portOfSagunto, bool statusPRV, bool statusOPE, bool statusAUT, bool statusFIN);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface PublicWebServiceChannel : wcfPcsEscalas.PublicWebService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class PublicWebServiceClient : System.ServiceModel.ClientBase<wcfPcsEscalas.PublicWebService>, wcfPcsEscalas.PublicWebService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PublicWebServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PublicWebServiceClient.GetBindingForEndpoint(endpointConfiguration), PublicWebServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublicWebServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PublicWebServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublicWebServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PublicWebServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PublicWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetVesselPortCallInfoAsync(string portCallNumber)
        {
            return base.Channel.GetVesselPortCallInfoAsync(portCallNumber);
        }
        
        public System.Threading.Tasks.Task<string> SearchVesselPortCallsAsync(System.DateTime dateFrom, System.DateTime dateTo, string vesselName, bool portOfValencia, bool portOfGandia, bool portOfSagunto, bool statusPRV, bool statusOPE, bool statusAUT, bool statusFIN)
        {
            return base.Channel.SearchVesselPortCallsAsync(dateFrom, dateTo, vesselName, portOfValencia, portOfGandia, portOfSagunto, statusPRV, statusOPE, statusAUT, statusFIN);
        }
        
        public System.Threading.Tasks.Task<string> SearchHistoricalVesselPortCallsAsync(int month, int year, string vesselName, bool portOfValencia, bool portOfGandia, bool portOfSagunto, bool statusPRV, bool statusOPE, bool statusAUT, bool statusFIN)
        {
            return base.Channel.SearchHistoricalVesselPortCallsAsync(month, year, vesselName, portOfValencia, portOfGandia, portOfSagunto, statusPRV, statusOPE, statusAUT, statusFIN);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_PublicWebService))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_PublicWebService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_PublicWebService))
            {
                return new System.ServiceModel.EndpointAddress("http://www.valenciaportpcs.net/portcalls/WebServices/Public");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_PublicWebService))
            {
                return new System.ServiceModel.EndpointAddress("https://www.valenciaportpcs.net/portcalls/WebServices/Public/Basic");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_PublicWebService,
            
            BasicHttpBinding_PublicWebService,
        }
    }
}
